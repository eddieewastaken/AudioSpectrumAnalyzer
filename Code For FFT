/*
Arduino-based audio visualizer.
*/

#include <avr/pgmspace.h>
#include <ffft.h>
#include <math.h>
#include <Wire.h>
#include "arduinoFFT.h"
 
#include <Adafruit_GFX.h>
#include <Adafruit_LEDBackpack.h>
#include <RGBmatrixPanel.h> // Hardware-specific library

#define CLK  11  // MUST be on PORTB!
#define LAT  A3
#define OE   9
#define A   A0
#define B   A1
#define C   A2
RGBmatrixPanel matrix(A, B, C, CLK, LAT, OE, false);

#define ADC_CHANNEL A7      //Analog pin
#define SAMPLES 128             //Must be a power of 2. MUST BE 128!
#define SAMPLING_FREQUENCY 10000 //Hz, must be less than 10000 due to ADC

arduinoFFT FFT = arduinoFFT();

int analogPin = 7;               //Analog pin

unsigned int sampling_period_us;
unsigned long microseconds;
 
double vReal[SAMPLES];
double vImag[SAMPLES];

int incomingAudio;              //Audio in
int incomingAudioCounter;       //Counter to track 32 audio values in at a time 
int maxNumAudioValues;          //Maximum number of different audio values coming in (256, 512, 1024)
int sampleSize;                 //Number of incomingAudio values to look at per display

int previousBarHeight[32], barHeight[32], binCount[32];

void setup() 
{
  int i;
  
  //Serial.begin(9600);           //setup serial
  //Serial.begin(19200);
  //Serial.begin(57600);
  //Serial.begin(74880);
  Serial.begin(115200);
  delay(1000);

  sampling_period_us = round(1000000*(1.0/SAMPLING_FREQUENCY));
  
  incomingAudio = 0;             //Initialize to 0
  incomingAudioCounter = 0;     //Initialize to 0
  maxNumAudioValues = 1024;     //0 - 1023 values coming in.  Total of 1024 values
  sampleSize = 512;             //Number of incomingAudio values to look at per display
  
  //Set all bar heights to "out of range" and bin counts to 0
  for (i=0; i<32; i++)  
  {
     barHeight[i] = 0;
     previousBarHeight[i] = 0;
     binCount[i] = 0;
  }

  matrix.begin();
}

void loop() 
{
    int i, j;
    int x, y;
    int redNumber, greenNumber, blueNumber;
    int sizeOfFilters; //Number of Audio Values divided by a Height of 16 pixels
    int barHeightScaler; 
    long barDrawDelay, clearAllBarsDelay;

    sizeOfFilters = maxNumAudioValues/32;   //Matrix is 32 pixels wide

    i = 0;
    j= 0;
    x = 0;
    y = 0;

    redNumber = 0;
    greenNumber = 0;
    blueNumber = 0;
    
    barDrawDelay = 0;
    clearAllBarsDelay = 0;
    
    while(1) 
    {
        /*SAMPLING*/
        for(int i=0; i<SAMPLES; i++)
        {
          microseconds = micros();    //Overflows after around 70 minutes!
     
          vReal[i] = analogRead(analogPin);
          vImag[i] = 0;
     
          while(micros() < (microseconds + sampling_period_us))
          {
          }
        }
 
         /*FFT*/
         FFT.Windowing(vReal, SAMPLES, FFT_WIN_TYP_HAMMING, FFT_FORWARD);
         FFT.Compute(vReal, vImag, SAMPLES, FFT_FORWARD);
         FFT.ComplexToMagnitude(vReal, vImag, SAMPLES);
         double peak = FFT.MajorPeak(vReal, SAMPLES, SAMPLING_FREQUENCY);
 
          /*PRINT RESULTS*/
          Serial.print("Peak: ");
          Serial.println(peak);     //Print out what frequency is the most dominant.
 
          for(int i=0; i<(SAMPLES/2); i++)
          {
            /*View all these three lines in serial terminal to see which frequencies has which amplitudes*/
         
            Serial.print((i * 1.0 * SAMPLING_FREQUENCY) / SAMPLES, 1);
            Serial.print(" ");
            Serial.println(vReal[i], 1);    //View only this line in serial plotter to visualize the bins
          }

        //Set all bar heights to "out of range" and bin counts to 0
        for (i=0; i<32; i++)  
        {
          barHeight[i] = 0;
          binCount[i] = 0;
        }

        //Average the 64 FFT samples down to 32 bins of integers
        j = 0;
        
        for(i = 0; i < (SAMPLES/2) - 1; i = i + 2)
        {
          binCount[j] = (vReal[i] + vReal[i + 1])/2;

          Serial.print("Bin ");
          Serial.print(j);
          Serial.print(" = ");
          Serial.println(binCount[j]);    

          j = j + 1;
        }

        //Now normalize all 32 bin counts down to fit max height of 16 pixels per bin and set its bar height
        //Use peak to set the highest value and lower the rest in relation to peak
        //Divide peak by 16 to get an integer scaling height factor and then divide all bins by this factor to get each bar height

        barHeightScaler = peak/16;
        
        for (i=0; i<32; i++)  
        {
          barHeight[i] = binCount[i]/barHeightScaler;
          
          //barHeight[i] = 16;

          Serial.print("Bar height ");
          Serial.print(i);
          Serial.print(" = ");
          Serial.println(barHeight[i]);   
        }
            
        //Now draw the 32 bars at the specified heights.  Matrix display is 32 x 16.
        //Each bar is made up of 1 line each (1 line x 32 = 32 dots on the x axis).
        //Each bar height goes from 0 to 15 (16 dots on the y axis).
        //Each bar changes color to show seperation as it rises.
        //Handle special cases of -1 (Silence) and -10 (Out of Range).
        //Compare with the previous bar height and only draw the "delta".  (***Took out for now while testing***)
        
        for(x = 0; x < 32; x++)
        {
          if (barHeight[x] == 0)   //Silence. 
          {
            for(y = 0; y <= 15; y++)
            {
              matrix.drawPixel(x, y, matrix.Color333(0, 0, 0));  //Set this bar to black
            }
          }
          else if (barHeight[x] == -10)  //Out of range.  
          {
            for(y = 0; y <= 15; y++)
            {
              matrix.drawPixel(x, y, matrix.Color333(7, 0, 0));  //Set this bar to red
            }
          }
          else                      //Process all other values
          {
            for(y = 0; y < barHeight[x]; y++)  
            {
              if (y <= 7)             //Bottom of bar is green
              {
                redNumber = 0;
                greenNumber = 7;
                blueNumber = 0;
              }
              else                    //Top of bar is yellow
              {
                redNumber = 7;
                greenNumber = 7;
                blueNumber = 0;
              }

              matrix.drawPixel(x, y, matrix.Color333(redNumber, greenNumber, blueNumber));
            }
            
            matrix.drawPixel(x, barHeight[x] - 1, matrix.Color333(0, 0, 7));  //Reset the top pixel to blue

            for(y = barHeight[x]; y <= 15; y++)   //Clear out all pixels above max.  ***Set to red for testing***
            {
              matrix.drawPixel(x, y, matrix.Color333(0, 0, 0));
            }
          }
          
          delay(barDrawDelay);
        }
        
        //Save all previous bar heights
        for (i=0; i<32; i++)  
        {
          previousBarHeight[i] =  barHeight[i];
        }

        delay(clearAllBarsDelay);

        //delay(1000);  //Repeat the process every second
    }
}
